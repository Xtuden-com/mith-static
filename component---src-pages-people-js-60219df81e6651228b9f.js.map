{"version":3,"sources":["webpack:///./src/pages/people.js"],"names":["query","PeoplePage","data","makePeople","people","nodes","map","person","img","headshot","key","new_id","to","slug","fluid","localFiles","childImageSharp","alt","name","className","imgStyle","objectFit","id","title","group","filter","g","fieldValue","match"],"mappings":"4FAAA,+HAyDaA,GAzDb,UAyDkB,aAsCHC,UAvFI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEpB,SAASC,EAAWC,GAClB,OAAOA,EAAOC,MAAMC,KAAI,SAAAC,GACtB,IAAMC,EAAMD,EAAOL,KAAKO,SACtB,kBAAC,IAAD,CAAMC,IAAG,KAAOH,EAAOL,KAAKS,OAAUC,GAAIL,EAAOL,KAAKW,MACtD,kBAAC,IAAD,CACEC,MAAOP,EAAOL,KAAKO,SAASM,WAAW,GAAGC,gBAAgBF,MAC1DG,IAAG,eAAiBV,EAAOL,KAAKgB,KAChCC,UAAU,WACVC,SAAU,CACRC,UAAW,YAIf,GACF,OACA,6BAASF,UAAU,SAASG,GAAIf,EAAOL,KAAKS,OAAQY,MAAOhB,EAAOL,KAAKgB,KAAMR,IAAG,KAAOH,EAAOL,KAAKS,QAChGH,EACD,wBAAIW,UAAU,QAAO,kBAAC,IAAD,CAAMT,IAAG,KAAOH,EAAOL,KAAKS,OAAUC,GAAIL,EAAOL,KAAKW,MAAON,EAAOL,KAAKgB,OAC9F,yBAAKC,UAAU,SAASZ,EAAOL,KAAKqB,WAM1C,OACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKA,MAAM,WACX,yBAAKJ,UAAU,eACb,6BAASG,GAAG,YACV,+CACCpB,EAAKE,OAAOoB,MACVC,QAAO,SAAAC,GAAC,MAAqB,eAAjBA,EAAEC,YAA+BD,EAAEC,WAAWC,MAAM,YAChEtB,IAAIH,IAGT,6BAASmB,GAAG,cACV,0CACCpB,EAAKE,OAAOoB,MACVC,QAAO,SAAAC,GAAC,MAAqB,eAAjBA,EAAEC,cACdrB,IAAIH,Q","file":"component---src-pages-people-js-60219df81e6651228b9f.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport Img from 'gatsby-image';\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport './people.css'\n\nconst PeoplePage = ({ data }) => { \n\n  function makePeople(people) {\n    return people.nodes.map(person => {\n      const img = person.data.headshot \n      ? <Link key={`p-${person.data.new_id}`} to={person.data.slug}>\n        <Img \n          fluid={person.data.headshot.localFiles[0].childImageSharp.fluid} \n          alt={`Headshot of ${person.data.name}`} \n          className=\"headshot\" \n          imgStyle={{\n            objectFit: \"cover\",\n          }}\n        />\n        </Link>\n      : ''\n      return (\n      <article className=\"person\" id={person.data.new_id} title={person.data.name} key={`p-${person.data.new_id}`}>\n        {img}\n        <h3 className=\"name\"><Link key={`p-${person.data.new_id}`} to={person.data.slug}>{person.data.name}</Link></h3>\n        <div className=\"title\">{person.data.title}</div>\n      </article>\n      )\n    })\n  }  \n\n  return (\n\t\t<Layout>\n      <SEO title=\"People\" />\n      <div className=\"page-people\">\n        <section id=\"facstaff\">\n          <h1>Faculty &amp; Staff</h1>\n          {data.people.group\n            .filter(g => g.fieldValue !== 'Affiliates' && g.fieldValue.match(/^[^P]/))\n            .map(makePeople)\n          }\n        </section>\n        <section id=\"affiliates\">\n          <h1>Affiliates</h1>\n          {data.people.group\n            .filter(g => g.fieldValue === 'Affiliates')\n            .map(makePeople)\n          }\n        </section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PeopleQuery {\n    people: allAirtable(\n      filter: {\n        table: {eq: \"People\"}, \n        data: {group_type: {regex: \"/^[^P].*/\"}}\n      }, \n      sort: {\n        fields: data___last\n      }\n    ) \n    {\n      group(field: data___group_type) {\n        fieldValue\n        nodes {\n          data {          \n            new_id\n            slug\n            name\n            first\n            last\n            title\n            headshot {\n              localFiles {\n                childImageSharp {\n                  fluid( maxHeight: 500, maxWidth: 500, fit: COVER, background: \"rgba(255,255,255,0)\" ) {\n                    ...GatsbyImageSharpFluid_noBase64\n                  }\n                }\n              }\n            }\n          }\n        }\n      }      \n    }\n  }\n`\n \nexport default PeoplePage"],"sourceRoot":""}