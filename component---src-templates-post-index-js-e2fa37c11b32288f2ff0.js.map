{"version":3,"sources":["webpack:///./src/templates/post-index.js","webpack:///./src/components/paginator.module.css","webpack:///./src/components/paginator.js"],"names":["query","PostIndex","data","posts","allAirtable","nodes","map","n","pageCount","pageInfo","title","className","post","slug","markdownFile","doc","allMarkdownRemark","find","fileAbsolutePath","match","Error","key","id","to","post_title","author_name","post_date","excerpt","count","path","module","exports","Paginator","paginatorStyles","pagination","label","Array","from","length","_","i","activeClassName","active","pageLink"],"mappings":"8FAAA,sHA0DaA,GA1Db,UA0DkB,cAmCHC,UApFG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACZC,EAAQD,EAAKE,YAAYC,MAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEL,QAC1CM,EAAYN,EAAKE,YAAYK,SAASD,UAE5C,OACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKE,MAAM,cACX,yBAAKC,UAAU,aACb,6BAASA,UAAU,QACjB,oCACCR,EAAMG,KAAI,SAAAM,GACT,IAAMC,EAAO,SAAWD,EAAKC,KACvBC,EAAeF,EAAKC,KAAO,MAG3BE,EAAMb,EAAKc,kBAAkBX,MAAMY,MACvC,SAAAV,GAAC,OAAIA,EAAEW,iBAAiBC,MAAML,MAMhC,IAAMC,EACJ,MAAM,IAAIK,MAAJ,kCAA4CR,EAAKC,MAGzD,OACE,6BAASF,UAAU,OAAOU,IAAG,QAAUT,EAAKU,IAC1C,wBAAIX,UAAU,cACZ,kBAAC,IAAD,CAAMY,GAAIV,GAAOD,EAAKY,aAExB,yBAAKb,UAAU,aAAf,MACK,0BAAMA,UAAU,UAAUC,EAAKa,aACjC,IAFH,MAEU,8BAAOb,EAAKc,YAEtB,yBAAKf,UAAU,gBACZI,EAAIY,QACL,kBAAC,IAAD,CAAMJ,GAAIV,EAAMF,UAAU,aAA1B,0BAMV,kBAAC,IAAD,CAAWiB,MAAOpB,EAAWqB,KAAK,a,8CCnD1CC,EAAOC,QAAU,CAAC,WAAa,sCAAsC,MAAQ,iCAAiC,OAAS,kCAAkC,SAAW,sC,kCCDpK,0DAsBeC,IAjBG,SAAC,GAAmB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACvB,OACI,yBAAKlB,UAAS,cAAgBsB,IAAgBC,YAC5C,0BAAMvB,UAAWsB,IAAgBE,OAAjC,UACCC,MAAMC,KAAK,CAAEC,OAAQV,IAAS,SAACW,EAAGC,GAAJ,OAC7B,kBAAC,IAAD,CACEC,gBAAiBR,IAAgBS,OACjC/B,UAAWsB,IAAgBU,SAC3BtB,IAAG,qBAAsBmB,EAAI,GAC7BjB,GAAE,IAAMM,EAAN,KAAoB,IAANW,EAAU,GAAKA,EAAI,IAClCA,EAAI","file":"component---src-templates-post-index-js-e2fa37c11b32288f2ff0.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby';\n\nimport Layout from '../components/layout'\nimport Paginator from '../components/paginator'\nimport SEO from '../components/seo'\n\nimport './post-index.css'\n\nconst PostIndex = ({data}) => {\n  const posts = data.allAirtable.nodes.map(n => n.data)\n  const pageCount = data.allAirtable.pageInfo.pageCount\n\n  return (\n\t\t<Layout>\n      <SEO title=\"MITH News\" />\n      <div className=\"page-news\">\n        <section className=\"news\">\n          <h1>News</h1>\n          {posts.map(post => {\n            const slug = '/news/' + post.slug\n            const markdownFile = post.slug + '.md'\n\n            // pick out the markdown file that has the same slug\n            const doc = data.allMarkdownRemark.nodes.find(\n              n => n.fileAbsolutePath.match(markdownFile)\n            )\n\n            // if there is no doc then we're missing the markdown file for a blog\n            // post that is in airtable \n            \n            if (! doc) {\n              throw new Error(`missing markdown post for slug ${post.slug}`)\n            }\n\n            return (\n              <article className=\"post\" key={`news-${post.id}`}>\n                <h2 className=\"post-title\">\n                  <Link to={slug}>{post.post_title}</Link>\n                </h2>\n                <div className=\"post-meta\">\n                  by <span className=\"author\">{post.author_name}</span>\n                  {' '}on <time>{post.post_date}</time>\n                </div>\n                <div className=\"post-excerpt\">\n                  {doc.excerpt} \n                  <Link to={slug} className=\"read-more\">continue reading</Link>\n                </div>\n              </article>\n            )\n          })}\n        </section>\n        <Paginator count={pageCount} path=\"news\" />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PostsQuery($skip: Int!, $limit: Int!) {\n    allAirtable(\n      filter: {\n        table: {eq: \"Posts\"}\n        data: {DD_Post: {eq: null}, Event_Post: {eq: null}}\n      }\n      limit: $limit\n      skip: $skip\n      sort: {fields: data___post_date, order: DESC}\n    ) {\n      nodes {\n        data {\n          slug\n          author_name\n          post_title\n          post_date(formatString: \"MMMM D, YYYY\")\n        }\n      }\n      pageInfo {\n        pageCount\n      }\n    }\n    allMarkdownRemark(\n      filter: {fields: {sourceName: {eq: \"news\"}}}\n    ) {\n      nodes {\n        excerpt(pruneLength: 250)\n        id\n        fileAbsolutePath\n      }\n    }\n  }\n`\n \nexport default PostIndex\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"paginator-module--pagination--2yTe4\",\"label\":\"paginator-module--label--34OWB\",\"active\":\"paginator-module--active--vg5X2\",\"pageLink\":\"paginator-module--pageLink--HXivC\"};","import { Link } from 'gatsby'\nimport React from 'react'\n\nimport paginatorStyles from './paginator.module.css'\n\nconst Paginator = ({count, path}) => {\n    return(\n        <div className={`pagination ${paginatorStyles.pagination}`}>\n          <span className={paginatorStyles.label}>Pages:</span>\n          {Array.from({ length: count }, (_, i) => (\n            <Link\n              activeClassName={paginatorStyles.active} \n              className={paginatorStyles.pageLink}\n              key={`pagination-number${i + 1}`}\n              to={`/${path}/${i === 0 ? \"\" : i + 1}`}>\n              {i + 1}\n            </Link>\n          ))}\n        </div>\n    )\n}\n\nexport default Paginator;"],"sourceRoot":""}